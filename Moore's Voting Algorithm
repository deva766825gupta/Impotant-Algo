//Moore's Voting Algorithm: Find majority candidate and then check if the the candidate is majority or not by running a simple loop
// Time complexity: O(n)
// Space complexity: O(1)
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count=1;
        int maj=nums[0];
        int size=nums.size();
        for(int i=1;i<size;i++)
        {
            if(nums[i]==maj)
                count++;
            else{
                count--;
            }
            if(count<=0)
            {
                maj=nums[i];
                count=1;
            }
        }
        count=0;
        for(int i=0;i<size;i++)
        {
            if(nums[i]==maj)
                count++;
        }
        if(count>(size/2))
            return maj;
        return -1;
    }
};
OR


//Approach-1
//T.C : O(n)
//S.C : O(1)
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();
        int count = 0;
        int maj = NULL;
        
        for(int i = 0; i<n; i++) {
            if(count == 0) {
                count = 1;
                maj = nums[i];
            }
            else if(nums[i] == maj) {
                count++;
            } else {
                count--;
            }
        }
        
        //Since it is gauranteed that majority element exists, so we don't check for freq of "maj" and return
        return maj;
    }
};

/* Time Complexity: O(N*log(log(N)))
Auxiliary Space: O(N) */

using namespace std;
void SieveOfEratosthenes(int n)
{
    bool prime[n + 1];
    memset(prime, true, sizeof(prime));
    for (int p = 2; p * p <= n; p++) {
        if (prime[p] == true) {
            
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }

    // Print all prime numbers
    for (int p = 2; p <= n; p++)
        if (prime[p])
            cout << p << " ";
}
#OR
#include <vector>

class Solution {
public:
    int countPrimes(int n) {
        if (n <= 2) return 0; 
        // Sieve Of Eratosthenes Method
        int cnt = 0;
        std::vector<bool> prime(n, true); 
        prime[0] = prime[1] = false;
        
        for (int i = 2; i * i < n; i++) {
            if (prime[i]) {
                for (int j = i * i; j < n; j += i) {
                    prime[j] = false;
                }
            }
        }
        
        for (int i = 2; i < n; i++) {
            if (prime[i]) cnt++;
        }
        
        return cnt;
    }
};
